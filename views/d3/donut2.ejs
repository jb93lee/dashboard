
<style>

.d-chart {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  width: 600px;
  height: 420px;
  position: relative;
}


svg {
	width: 100%;
	height: 100%;
}

path.slice{
	stroke-width:2px;
}

polyline{
	opacity: .3;
	stroke: black;
	stroke-width: 2px;
	fill: none;
}

</style>

<script>
document.addEventListener("DOMContentLoaded", function(event) {

	var svg = d3.select(".d-chart")
		.append("svg")
		.append("g")

	svg.append("g")
		.attr("class", "slices");
	svg.append("g")
		.attr("class", "labels");
	svg.append("g")
		.attr("class", "lines");

	var width = 460,
		height = 500,
		radius = Math.min(width, height) / 1.8;

	var pie = d3.layout.pie()
		.sort(null)
		.value(function(d) {
			return d.value;
		});

	var arc = d3.svg.arc()
		.outerRadius(radius * 0.5)
		.innerRadius(radius * 0.3);

	var outerArc = d3.svg.arc()
		.innerRadius(radius * 0.8)
		.outerRadius(radius * 0.4);

	svg.attr("transform", "translate(" + width / 2 + "," + height / 2.5 + ")");

	var key = function(d){ return d.data.label; };

	var color = d3.scale.ordinal()
		.domain(["ICMP Destination Unreachable", "ICMP Echo", "CoDeSys Industrial Automation Stack Overru",
    "Secure Shell Brute Force", "SIP Missing Required Contact Header Fields", "UDP Flooding",
    "ICMP Time Exceeded","Windows TCP Small Window DoS","RPC Port Map Dump", "UDP Invalid Data Size"])
		.range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

	function randomData (){
		var labels = color.domain();
		return labels.map(function(label){
      if(label == "ICMP Destination Unreachable"){
				return { label: label, value: 2000}
			}
      if(label == "ICMP Echo"){
				return { label: label, value: 781}
			}
      if(label == "CoDeSys Industrial Automation Stack Overru"){
				return { label: label, value: 723}
			}
      if(label == "Secure Shell Brute Force"){
				return { label: label, value: 388}
			}
      if(label == "ICMP Time Exceeded"){
				return { label: label, value: 261}
			}
      if(label == "SIP Missing Required Contact Header Fields"){
				return { label: label, value: 187}
			}
      if(label == "UDP Flooding"){
				return { label: label, value: 128}
			}
      if(label == "Windows TCP Small Window DoS"){
				return { label: label, value: 69}
			}
      if(label == "RPC Port Map Dump"){
				return { label: label, value: 66}
			}
			else{
				return { label: label, value: 46 }
			}
		});
	}

	change(randomData());

	d3.select(".randomize")
		.on("click", function(){
			change(randomData());
		});


	function change(data) {

		/* ------- PIE SLICES -------*/
		var slice = svg.select(".slices").selectAll("path.slice")
			.data(pie(data), key);

		slice.enter()
			.insert("path")
			.style("fill", function(d) { return color(d.data.label); })
			.attr("class", "slice");

		slice
			.transition().duration(550)
			.attrTween("d", function(d) {
				this._current = this._current || d;
				var interpolate = d3.interpolate(this._current, d);
				this._current = interpolate(0);
				return function(t) {
					return arc(interpolate(t));
				};
			})

		slice.exit()
			.remove();

		/* ------- TEXT LABELS -------*/

		var text = svg.select(".labels").selectAll("text")
			.data(pie(data), key);

		text.enter()
			.append("text")
			.attr("dy", ".35em")
			.text(function(d) {
				return d.data.label;
			});

		function midAngle(d){
			return d.startAngle + (d.endAngle - d.startAngle)/2;
		}

		text.transition().duration(550)
			.attrTween("transform", function(d) {
				this._current = this._current || d;
				var interpolate = d3.interpolate(this._current, d);
				this._current = interpolate(0);
				return function(t) {
					var d2 = interpolate(t);
					var pos = outerArc.centroid(d2);
					pos[0] = radius * 0.55 * (midAngle(d2) < Math.PI ? 1 : -1);
					return "translate("+ pos +")";
				};
			})
			.styleTween("text-anchor", function(d){
				this._current = this._current || d;
				var interpolate = d3.interpolate(this._current, d);
				this._current = interpolate(0);
				return function(t) {
					var d2 = interpolate(t);
					return midAngle(d2) < Math.PI ? "start":"end";
				};
			});

		text.exit()
			.remove();

		/* ------- SLICE TO TEXT POLYLINES -------*/

		var polyline = svg.select(".lines").selectAll("polyline")
			.data(pie(data), key);

		polyline.enter()
			.append("polyline");

		polyline.transition().duration(550)
			.attrTween("points", function(d){
				this._current = this._current || d;
				var interpolate = d3.interpolate(this._current, d);
				this._current = interpolate(0);
				return function(t) {
					var d2 = interpolate(t);
					var pos = outerArc.centroid(d2);
					pos[0] = radius * 0.5 * (midAngle(d2) < Math.PI ? 1 : -1);
					return [arc.centroid(d2), outerArc.centroid(d2), pos];
				};
			});

		polyline.exit()
			.remove();
	};
});
</script>
